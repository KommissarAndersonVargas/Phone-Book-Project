<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAAAAAAAEAIAD1GQAAFgAAAIlQTkcNChoKAAAADUlIRFIAAAEAAAABAAgGAAAAXHKoZgAAAAlw
        SFlzAAALEwAACxMBAJqcGAAAGadJREFUeJztnQ2UXGV5xxNAxe+v6qlWxY+QnZn93juLFNvmKFRtbWul
        BYutnnpqbf2otrZqW23v7G5CvghhSTJ3BlDQc1rb5UNByN6ZBZZATAhJSEJikrmzIRgVMEgF8QPFMH2f
        u7txs9md3Jm5M//7vvf/P+d3EkIyO/e5z/+5730/FyygKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqi
        KIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqi6ldq/b4XpbMH2ixn4m3pbPlP0jnvw2mn
        /C+K5VbOW205Xl5IO9516s9GJvGum/5z+Tvyd/1/I/9WPiNfPk8+s+uru1+Ivj6Kir3E5H1Z79x0buKj
        llNeJSZW5r1P/Xo0nStXmor6GVM/a0T990r5DvJd5Duh40JRxumcYe8lVt57p3oa2+rpfJMy3oR6Yj/b
        dKPXjHdMvpsqSDf631V95/OuOfBidPwoSit1ZSderczzAStX3qDYrZ62v8Kbuz7ku6uCsEv9ut5ySpf0
        fMl7FTq+FBUpXTRSOb0vO2Gpp/vn1ZNzs/8kjYB5m9ZKyHk7VEthRTpfusDK73gOOv4U1XItscfP6MuW
        36We8F9ST8jH8cYEtRBy5R+qX6+R1wWJCfq+UFTzZFdO689NnK+e9FdNJT7cgJHCKT+mfs1Z+fLbJVbo
        20VRocjK73+NNO+V6Q/BTaYJqlX0XXlNsPKH3oC+fxRVu9QTzHIm/lAZ/2Zl/GfQhtKVydh530jnJ/5g
        QaWyEH1bKaqqFg17z1NPrw+pxP022jzm4ZXTjvfpc9cceT76PlPUCbLyB39Dxr4VP8AbxWwsx3vUypW+
        2L9u/yvR952KuWSiiz9853hPoI0RQ56SfoLO7Hdejs4DKmaSaa9Txv9RBIwQa9Qr14+nOgxfis4LynDJ
        WLV6v/8HDuNFkMlhxE9wPgHVFMkYvnriPwBPdFIVVZwPyggMOl8oQ9R/1aHF6ulyKzqxSa2FwLu5d315
        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
        RU5ErkJggg==
</value>
  </data>
</root>